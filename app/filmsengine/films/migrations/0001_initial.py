# Generated by Django 2.2.4 on 2019-11-01 16:19

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ContactAs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('message', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('link', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('slug', models.SlugField(max_length=150, unique=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Year',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('years', models.SmallIntegerField(db_index=True, default='2019', unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Seasone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('episodes', models.ManyToManyField(blank=True, related_name='episodes', to='films.Episode')),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=150, unique=True)),
                ('slug', models.SlugField(max_length=150, unique=True)),
                ('description', models.TextField(blank=True)),
                ('status_watched', models.BooleanField(default=True)),
                ('banner', models.CharField(blank=True, max_length=150, null=True)),
                ('imbdID', models.CharField(blank=True, max_length=50, null=True)),
                ('release', models.DateTimeField(null=True)),
                ('image', models.ImageField(upload_to='images/')),
                ('views', models.PositiveIntegerField(default=0)),
                ('date_pub', models.DateTimeField(auto_now_add=True)),
                ('directors', models.ManyToManyField(related_name='directors', to='films.Person')),
                ('genres', models.ManyToManyField(related_name='genres', to='films.Genre')),
                ('links', models.ManyToManyField(related_name='links', to='films.Link')),
                ('seasones', models.ManyToManyField(blank=True, related_name='seasone', to='films.Seasone')),
                ('stars', models.ManyToManyField(related_name='stars', to='films.Person')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='year', to='films.Year')),
            ],
            options={
                'ordering': ['-date_pub'],
            },
        ),
    ]
